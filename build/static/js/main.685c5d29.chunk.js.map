{"version":3,"sources":["components/Note.js","components/Notification.js","services/notes.js","App.js","index.js"],"names":["Note","_ref","note","toggleImportance","label","important","react_default","a","createElement","content","onClick","Notification","message","className","notes","getAll","axios","get","then","response","data","create","newObject","post","update","id","put","concat","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","addNote","event","preventDefault","noteObject","state","newNote","date","Date","toISOString","Math","random","noteService","console","log","setState","handleNoteChange","target","value","toggleVisible","showAll","toggleImportanceOf","find","n","changedNote","objectSpread","updatedNote","map","error","_this2","_this3","notesToShow","filter","components_Notification","components_Note","key","onSubmit","onChange","type","React","Component","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.685c5d29.chunk.js","sourcesContent":["import React from 'react'\n\nconst Note = ({ note, toggleImportance }) => {\n    const label = note.important ? 'important' : 'not important'\n\n    return (\n        <li>\n            {note.content}\n            <button onClick={toggleImportance}>\n                {label}\n            </button>\n        </li>\n    )\n}\n\nexport default Note","import React from 'react'\n\nconst Notification = ({ message }) => {\n    if (message === null) {\n        return null\n    }\n    return (\n        <div className=\"error\">\n            {message}\n        </div>\n    )\n}\n\nexport default Notification","import axios from 'axios'\nconst baseUrl = '/api/notes'\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  return request.then(response => response.data)\n}\n\nconst create = (newObject) => {\n  const request = axios.post(baseUrl, newObject)\n  return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\n  return request.then(response => response.data)\n}\n\nexport default { getAll, create, update }","import React from 'react'\nimport Note from './components/Note'\nimport Notification from './components/Notification'\nimport noteService from './services/notes'\nimport './index.css'\n\nclass App extends React.Component {\n    constructor(props) {\n      super(props)\n      this.state = {\n        notes: [],\n        newNote: 'uusi muistiinpano...',\n        showAll: true,\n        error: null\n      }\n      console.log('constructor')\n    }\n\n    componentDidMount() {\n      console.log('did mount')\n      noteService\n        .getAll()\n        .then(notes => {\n          console.log('promise fullfilled')\n          this.setState({notes})\n        })\n    }\n\n\n    addNote = (event) => {\n        event.preventDefault()\n        const noteObject = {\n          content: this.state.newNote,\n          date: new Date().toISOString(),\n          important: Math.random() > 0.5\n        }\n\n        noteService\n          .create(noteObject)\n          .then(newNote => {\n            console.log(newNote)\n            this.setState({\n              notes: this.state.notes.concat(newNote),\n              newNote: ''\n            })\n          })\n    }\n\n    handleNoteChange = (event) => {\n        this.setState({ newNote: event.target.value })\n    }\n\n    toggleVisible = () => {\n      this.setState({showAll: !this.state.showAll});\n    }\n\n    toggleImportanceOf = (id) => {\n      return () => {\n        const note = this.state.notes.find(n => n.id === id)\n        const changedNote = { ...note, important: !note.important}\n    \n        noteService\n          .update(id, changedNote)\n          .then(updatedNote => {\n            this.setState({\n              notes: this.state.notes.map(note => note.id !== id ? note : updatedNote)\n            })\n          })\n      }\n    }    \n  \n    render() {\n      console.log('render')\n      const notesToShow =\n        this.state.showAll ?\n          this.state.notes :\n          this.state.notes.filter((note) => note.important)\n\n      const label = this.state.showAll ? 'vain t채rke채t' : 'kaikki'\n\n      return (\n        <div>\n          <h1>Muistiinpanot</h1>\n\n          <Notification message={this.state.error} />\n\n          <div>\n            <button onClick={this.toggleVisible}>\n              n채yt채 {label}\n            </button>\n          </div>\n\n          <ul>\n            {notesToShow.map(note => \n            <Note \n              key={note.id} \n              note={note}\n              toggleImportance={this.toggleImportanceOf(note.id)}\n            />)}\n          </ul>\n          <form onSubmit={this.addNote}>\n            <input \n                value={this.state.newNote}\n                onChange={this.handleNoteChange}\n            />\n            <button type=\"submit\">tallenna</button>\n          </form>\n        </div>\n      )\n    }\n}\n\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)"],"sourceRoot":""}